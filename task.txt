import java.util.*;

class Task {
    private int taskId;
    private String taskName;
    private String dueDate;
    private String priority;

    public Task(int taskId, String taskName, String dueDate, String priority) {
        this.taskId = taskId;
        this.taskName = taskName;
        this.dueDate = dueDate;
        this.priority = priority;
    }

    // Getters and Setters
    public int getTaskId() { return taskId; }
    public void setTaskId(int taskId) { this.taskId = taskId; }

    public String getTaskName() { return taskName; }
    public void setTaskName(String taskName) { this.taskName = taskName; }

    public String getDueDate() { return dueDate; }
    public void setDueDate(String dueDate) { this.dueDate = dueDate; }

    public String getPriority() { return priority; }
    public void setPriority(String priority) { this.priority = priority; }

    @Override
    public String toString() {
        return "TaskID: " + taskId + ", Name: " + taskName + ", Due: " + dueDate + ", Priority: " + priority;
    }
}

class TaskManager {
    private ArrayList<Task> tasks = new ArrayList<>();
    private int taskIdCounter = 1; // Auto-increment Task ID

    // Add a new task
    public void addTask(String taskName, String dueDate, String priority) {
        Task task = new Task(taskIdCounter++, taskName, dueDate, priority);
        tasks.add(task);
        System.out.println("Task added successfully!\n");
    }

    // View all tasks
    public void viewTasks() {
        if (tasks.isEmpty()) {
            System.out.println("No tasks available.\n");
            return;
        }
        for (Task task : tasks) {
            System.out.println(task);
        }
        System.out.println();
    }

    // Update a task
    public void updateTask(int taskId, String taskName, String dueDate, String priority) {
        for (Task task : tasks) {
            if (task.getTaskId() == taskId) {
                if (!taskName.isEmpty()) task.setTaskName(taskName);
                if (!dueDate.isEmpty()) task.setDueDate(dueDate);
                if (!priority.isEmpty()) task.setPriority(priority);
                System.out.println("Task updated successfully!\n");
                return;
            }
        }
        System.out.println("Task ID not found.\n");
    }

    // Delete a task
    public void deleteTask(int taskId) {
        Iterator<Task> iterator = tasks.iterator();
        while (iterator.hasNext()) {
            if (iterator.next().getTaskId() == taskId) {
                iterator.remove();
                System.out.println("Task deleted successfully!\n");
                return;
            }
        }
        System.out.println("Task ID not found.\n");
    }

    // Sort tasks by priority or due date
    public void sortTasksByPriority() {
        tasks.sort(Comparator.comparing(Task::getPriority));
        System.out.println("Tasks sorted by priority.\n");
    }

    public void sortTasksByDueDate() {
        tasks.sort(Comparator.comparing(Task::getDueDate));
        System.out.println("Tasks sorted by due date.\n");
    }
}

public class TaskManagementSystem {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        TaskManager taskManager = new TaskManager();

        while (true) {
            System.out.println("\n1. Add Task");
            System.out.println("2. View Tasks");
            System.out.println("3. Update Task");
            System.out.println("4. Delete Task");
            System.out.println("5. Sort by Priority");
            System.out.println("6. Sort by Due Date");
            System.out.println("7. Exit");
            System.out.print("Enter your choice: ");
            
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline
            
            switch (choice) {
                case 1:
                    System.out.print("Enter task name: ");
                    String name = scanner.nextLine();
                    System.out.print("Enter due date (YYYY-MM-DD): ");
                    String date = scanner.nextLine();
                    System.out.print("Enter priority (High/Medium/Low): ");
                    String priority = scanner.nextLine();
                    taskManager.addTask(name, date, priority);
                    break;
                
                case 2:
                    taskManager.viewTasks();
                    break;

                case 3:
                    System.out.print("Enter task ID to update: ");
                    int updateId = scanner.nextInt();
                    scanner.nextLine();
                    System.out.print("Enter new task name (leave blank to keep unchanged): ");
                    String newName = scanner.nextLine();
                    System.out.print("Enter new due date (leave blank to keep unchanged): ");
                    String newDate = scanner.nextLine();
                    System.out.print("Enter new priority (leave blank to keep unchanged): ");
                    String newPriority = scanner.nextLine();
                    taskManager.updateTask(updateId, newName, newDate, newPriority);
                    break;
                
                case 4:
                    System.out.print("Enter task ID to delete: ");
                    int deleteId = scanner.nextInt();
                    taskManager.deleteTask(deleteId);
                    break;
                
                case 5:
                    taskManager.sortTasksByPriority();
                    taskManager.viewTasks();
                    break;
                
                case 6:
                    taskManager.sortTasksByDueDate();
                    taskManager.viewTasks();
                    break;

                case 7:
                    System.out.println("Exiting... Goodbye!");
                    scanner.close();
                    return;
                
                default:
                    System.out.println("Invalid choice. Try again.");
            }
        }
    }
}